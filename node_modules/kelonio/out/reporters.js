"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var etc_1 = require("./etc");
var MOCHA_EVENT_TEST_BEGIN = "test";
var MOCHA_EVENT_RUN_END = "end";
var JestReporter = /** @class */ (function () {
    function JestReporter() {
    }
    JestReporter.initializeKelonio = function () {
        var state = new etc_1.BenchmarkFileState();
        state.delete();
        _1.benchmark.events.on("record", function (description, measurement) {
            var b = new _1.Benchmark();
            if (state.exists()) {
                b.data = state.read();
            }
            b.incorporate(description, measurement);
            state.write(b.data);
        });
    };
    JestReporter.prototype.onRunComplete = function () {
        var state = new etc_1.BenchmarkFileState();
        if (!state.exists()) {
            throw new Error("The Kelonio reporter for Jest requires benchmark serialization."
                + " Make sure to call `JestReporter.initializeKelonio()`.");
        }
        var b = new _1.Benchmark();
        b.data = state.read();
        console.log("\n" + b.report());
        state.delete();
    };
    return JestReporter;
}());
exports.JestReporter = JestReporter;
var KarmaReporter = /** @class */ (function () {
    function KarmaReporter(baseReporterDecorator, config, logger, helper, formatError) {
        var _this = this;
        baseReporterDecorator(this);
        var activeConfig = __assign({ inferBrowsers: true }, config.kelonioReporter);
        var b = new _1.Benchmark();
        this.onBrowserLog = function (browser, log, type) {
            if (type === "kelonio") {
                var parsed = JSON.parse(log.slice(1, -1));
                var browserDescription = activeConfig.inferBrowsers ? [browser] : [];
                b.incorporate(__spreadArrays(browserDescription, parsed.description), new _1.Measurement(parsed.durations));
            }
        };
        this.onRunComplete = function () {
            _this.write(b.report() + "\n");
        };
    }
    KarmaReporter.initializeKelonio = function () {
        _1.benchmark.events.on("record", function (description, measurement) {
            window.__karma__.log("kelonio", [JSON.stringify({ description: description, durations: measurement.durations })]);
        });
    };
    return KarmaReporter;
}());
exports.KarmaReporter = KarmaReporter;
var MochaReporter = /** @class */ (function () {
    function MochaReporter(runner, options) {
        var b = new _1.Benchmark();
        var baseDescription = [];
        var inferDescriptions = options.reporterOptions.inferDescriptions;
        _1.benchmark.events.on("record", function (description, measurement) {
            b.incorporate(baseDescription.concat(description), measurement);
        });
        if (inferDescriptions === true || inferDescriptions === undefined) {
            runner.on(MOCHA_EVENT_TEST_BEGIN, function (test) {
                baseDescription = test.titlePath();
            });
        }
        runner.once(MOCHA_EVENT_RUN_END, function () {
            console.log("\n" + b.report());
        });
    }
    return MochaReporter;
}());
exports.MochaReporter = MochaReporter;
//# sourceMappingURL=reporters.js.map